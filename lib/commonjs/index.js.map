{"version":3,"sources":["index.tsx"],"names":["EspIdfRn","NativeModules","eventEmitter","NativeEventEmitter","ProvisioningStep","useProvisioning","devicePrefix","pop","message","console","log","msg","bleDevices","setBleDevices","wifiAPs","setWifiAPs","loading","setLoading","status","setStatus","scanBle","isConnecting","currentStep","setCurrentStep","SCANNING_BLES","provSent","setProvSent","initStep","sendingWifiCredential","provApplied","setProvApplied","confirmWifiConnection","provFinal","setProvFinal","currentWifi","currentDevice","connectDevice","bleDevice","current","stopBleScan","serviceUuid","configWifi","wifi","ssid","auth","WAITING_WIFI_CREDENTIALS","COMPLETE","doProvisioning","Promise","resolve","addListener","event","wifiList","disconnectDevice","removeAllListeners","initPermissionCheckAndBleScan","result","checkPermissions","startBleScan","_handleAppStateChange","nextAppState","AppState","addEventListener","SCANNING_WIFIS","startWifiScan","type","enableBluetooth","enableLocation","removeEventListener","Array","deviceName","prev","some","it","concat","scanBleFailed","WAITING_CERTIFICATE","waitingCertificate","connectFailed","disconnected","scanWifi","STARTED","doneStep","initSessionError","done","progress","completed","applyError","results","sendCertificate","_wifi","password","info","newInfo","thingName","endpointUrl","deviceCert","replace","deviceKey","failed"],"mappings":"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","sourcesContent":["import {\r\n\tNativeModules,\r\n\tNativeEventEmitter,\r\n\tEmitterSubscription,\r\n\tAppState,\r\n\tAppStateStatus,\r\n} from 'react-native'\r\nimport { useEffect, useState, useRef } from 'react'\r\n\r\nexport type EspProvisioning = {\r\n\t/**\r\n\t * check if has proper permissions, if not will request the needed permissions at native\r\n\t */\r\n\tcheckPermissions(): Promise<boolean>\r\n\t/**\r\n\t * search BLE ESP device\r\n\t * @param prefix prefix of device name\r\n\t */\r\n\tstartBleScan(prefix: string | null): Promise<boolean>\r\n\tstopBleScan(): void\r\n\t/**\r\n\t * connect to an ESP device\r\n\t * @param uuid device serviceID\r\n\t * @param pop proof of possession\r\n\t */\r\n\tconnectDevice(uuid: string, pop: string | null): Promise<boolean>\r\n\t/**\r\n\t * disconnect the connected ESP device\r\n\t */\r\n\tdisconnectDevice(): void\r\n\t/**\r\n\t *\r\n\t */\r\n\tstartWifiScan(): Promise<boolean>\r\n\t/**\r\n\t * provisioning Wi-Fi configuration\r\n\t * @param ssidValue Wi-Fi SSID\r\n\t * @param passphraseValue password\r\n\t */\r\n\tdoProvisioning(ssidValue: string, passphraseValue: string): Promise<boolean>\r\n\t/**\r\n\t * send a certificate\r\n\t * @param thingName BLE name of the device\r\n\t * @param endpointUrl AWS endpoint that depends on the environment\r\n\t * @param deviceCert Certificate\r\n\t * @param deviceKey Certificate's key\r\n\t */\r\n\t sendCertificate(thingName: string, endpointUrl: string, deviceCert: string, deviceKey: string): Promise<boolean>\r\n}\r\n\r\ndeclare enum BleScanStatus {\r\n\tFAILED = 0,\r\n\tCOMPLETED = 1,\r\n}\r\nexport interface BleScanEvent {\r\n\tstatus: BleScanStatus\r\n}\r\nexport interface BleDevice {\r\n\tdeviceName: string\r\n\tserviceUuid: string\r\n}\r\n\r\ntype BleScanEventListener = (\r\n\tevent: BleScanEvent | BleDevice | BleDevice[]\r\n) => void\r\n\r\nexport interface EspEventEmitter extends NativeEventEmitter {\r\n\taddListener(\r\n\t\teventType: 'scanBle',\r\n\t\tlistener: BleScanEventListener\r\n\t): EmitterSubscription\r\n}\r\n\r\ndeclare enum DeviceConnectionStatus {\r\n\tCONNECTED = 1,\r\n\tFAILED = 2,\r\n\tDISCONNECTED = 3,\r\n}\r\nexport interface DeviceConnectionEvent {\r\n\tstatus: DeviceConnectionStatus\r\n}\r\ntype DeviceConnectionEventListener = (event: DeviceConnectionEvent) => void\r\nexport interface EspEventEmitter extends NativeEventEmitter {\r\n\taddListener(\r\n\t\teventType: 'connection',\r\n\t\tlistener: DeviceConnectionEventListener\r\n\t): EmitterSubscription\r\n}\r\n\r\ndeclare enum WifiScanStatus {\r\n\tFAILED = 0,\r\n}\r\ndeclare enum WifiAuthMode {\r\n\tWIFI_UNKNOWN = -1,\r\n\tWIFI_OPEN = 0,\r\n\tWIFI_WEP = 1,\r\n\tWIFI_WPA_PSK = 2,\r\n\tWIFI_WPA2_PSK = 3,\r\n\tWIFI_WPA_WPA2_PSK = 4,\r\n\tWIFI_WPA2_ENTERPRISE = 5,\r\n}\r\nexport interface WifiAP {\r\n\tssid: string\r\n\tauth: WifiAuthMode\r\n\trssi: number\r\n}\r\nexport type WifiAPWithPwd = WifiAP & { password: string }\r\nexport interface WifiScanEvent {\r\n\tstatus?: WifiScanStatus\r\n\tmessage?: string\r\n\twifiList?: WifiAP[]\r\n}\r\ntype WifiScanEventListener = (event: WifiScanEvent) => void\r\n\r\nexport interface CertificateInfo {\r\n\tthingName: string,\r\n\tendpointUrl: string,\r\n\tdeviceCert: string,\r\n\tdeviceKey: string,\r\n}\r\nexport interface EspEventEmitter extends NativeEventEmitter {\r\n\taddListener(\r\n\t\teventType: 'scanWifi',\r\n\t\tlistener: WifiScanEventListener\r\n\t): EmitterSubscription\r\n}\r\n\r\ndeclare enum PermissionType {\r\n\tREQUEST_ENABLE_BT = 1,\r\n\tREQUEST_FINE_LOCATION = 2,\r\n}\r\n\r\ndeclare enum PermissionStatus {\r\n\tUNKNOWN = 0,\r\n\tLIMITED = 1,\r\n\tDENIED = 2,\r\n\tALLOWED = 3,\r\n}\r\nexport interface PermissionEvent {\r\n\ttype: PermissionType\r\n\tstatus: PermissionStatus\r\n}\r\ntype PermissionEventListener = (event: PermissionEvent) => void\r\nexport interface EspEventEmitter extends NativeEventEmitter {\r\n\taddListener(\r\n\t\teventType: 'permission',\r\n\t\tlistener: PermissionEventListener\r\n\t): EmitterSubscription\r\n}\r\n\r\ndeclare enum ProvisioningStatus {\r\n\tPROV_INIT_FAILED = 0,\r\n\tPROV_CONFIG_SENT = 1,\r\n\tPROV_CONFIG_FAILED = 2,\r\n\tPROV_CONFIG_APPLIED = 3,\r\n\tPROV_APPLY_FAILED = 4,\r\n\tPROV_COMPLETED = 5,\r\n\tPROV_FAILED = 6,\r\n}\r\nexport interface ProvisioningEvent {\r\n\tstatus: ProvisioningStatus\r\n\tmessage?: string\r\n}\r\n\r\ntype ProvisioningEventListener = (event: ProvisioningEvent) => void\r\nexport interface EspEventEmitter extends NativeEventEmitter {\r\n\taddListener(\r\n\t\teventType: 'provisioning',\r\n\t\tlistener: ProvisioningEventListener\r\n\t): EmitterSubscription\r\n}\r\n\r\n\r\ndeclare enum CertificateStatus {\r\n\tFAILED = 0,\r\n\tCOMPLETED = 1\r\n}\r\nexport interface CertificateEvent {\r\n\tstatus: CertificateStatus\r\n\tmessage?: string\r\n}\r\n\r\ntype SendCertificateEventListener = (event: CertificateEvent) => void\r\n\r\nexport interface EspEventEmitter extends NativeEventEmitter {\r\n\taddListener(\r\n\t\teventType: 'certificate',\r\n\t\tlistener: SendCertificateEventListener\r\n\t): EmitterSubscription\r\n}\r\n\r\nconst { EspIdfRn } = NativeModules as { EspIdfRn: EspProvisioning }\r\n\r\nexport const eventEmitter: EspEventEmitter = new NativeEventEmitter(\r\n\tEspIdfRn as any\r\n)\r\n\r\nexport default EspIdfRn\r\n\r\nexport type MessageInfo = {\r\n\tscanBle: string\r\n\twaitingCertificate: string\r\n\tscanWifi: string\r\n\tconnectDevice: string\r\n\tsendingWifiCredential: string\r\n\tconfirmWifiConnection: string\r\n\tenableBluetooth: string\r\n\tenableLocation: string\r\n\tscanBleFailed: string\r\n\tconnectFailed: string\r\n\tdisconnected: string\r\n\tinitSessionError: string\r\n\tcompleted: string\r\n\tapplyError: string\r\n}\r\n\r\ntype ProvisioningProps = {\r\n\tdevicePrefix: string | null\r\n\tpop?: string | null\r\n\tmessage: MessageInfo\r\n}\r\n\r\nexport enum ProvisioningStep {\r\n\tSTARTED = 0,\r\n\tSCANNING_BLES = 1,\r\n\tWAITING_CERTIFICATE = 2,\r\n\tSCANNING_WIFIS = 3,\r\n\tWAITING_WIFI_CREDENTIALS = 4,\r\n\tCOMPLETE = 5,\r\n}\r\n\r\nexport function useProvisioning({\r\n\tdevicePrefix,\r\n\tpop = null,\r\n\tmessage,\r\n}: ProvisioningProps) {\r\n\tconsole.log('Invoke func useProvisioning')\r\n\tconst msg = useRef<MessageInfo>(message)\r\n\tconst [bleDevices, setBleDevices] = useState<BleDevice[]>([])\r\n\tconst [wifiAPs, setWifiAPs] = useState<WifiAP[]>([])\r\n\tconst [loading, setLoading] = useState(true)\r\n\tconst [status, setStatus] = useState(message.scanBle)\r\n\tconst isConnecting = useRef(false)\r\n\tconst [currentStep, setCurrentStep] = useState<ProvisioningStep>(ProvisioningStep.SCANNING_BLES)\r\n\r\n\tconst [provSent, setProvSent] = useState(\r\n\t\tinitStep(message.sendingWifiCredential, true)\r\n\t)\r\n\tconst [provApplied, setProvApplied] = useState(\r\n\t\tinitStep(message.confirmWifiConnection)\r\n\t)\r\n\tconst [provFinal, setProvFinal] = useState(initStep(''))\r\n\r\n\tconst currentWifi = useRef<WifiAP>()\r\n\tconst currentDevice = useRef<BleDevice>()\r\n\r\n\tfunction connectDevice(bleDevice: BleDevice) {\r\n\t\tif (isConnecting.current) return\r\n\t\tisConnecting.current = true\r\n\t\tEspIdfRn.stopBleScan()\r\n\t\tconsole.log('Connect to device:', bleDevice, pop)\r\n\t\tsetStatus(message.connectDevice)\r\n\t\tcurrentDevice.current = bleDevice\r\n\t\treturn EspIdfRn.connectDevice(bleDevice.serviceUuid, pop)\r\n\t}\r\n\r\n\tfunction configWifi(wifi: WifiAP) {\r\n\t\tconsole.log('Selected Wifi:', wifi)\r\n\t\tcurrentWifi.current = wifi\r\n\t\tsetCurrentStep(!wifi.ssid || wifi.auth > 0 ? ProvisioningStep.WAITING_WIFI_CREDENTIALS : ProvisioningStep.COMPLETE)\r\n\t\tif (!wifi.auth) {\r\n\t\t\treturn doProvisioning(wifi)\r\n\t\t}\r\n\t\treturn Promise.resolve(true)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\teventEmitter.addListener('scanWifi', (event) => {\r\n\t\t\tconsole.log('Event scanWifi', event)\r\n\t\t\tsetLoading(false)\r\n\t\t\tsetStatus('')\r\n\t\t\tif (event.wifiList) {\r\n\t\t\t\tsetWifiAPs(event.wifiList)\r\n\t\t\t} else if (event.message) {\r\n\t\t\t\tsetStatus(event.message)\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn function () {\r\n\t\t\tconsole.log('Cleanup the resource')\r\n\t\t\tEspIdfRn.stopBleScan()\r\n\t\t\tEspIdfRn.disconnectDevice()\r\n\t\t\teventEmitter.removeAllListeners('scanWifi')\r\n\t\t}\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('Added AppSateChanged listener with step: ', currentStep)\r\n\r\n\t\tasync function initPermissionCheckAndBleScan() {\r\n\t\t\tconsole.log('Start checkPermissions')\r\n\t\t\tconst result = await EspIdfRn.checkPermissions()\r\n\t\t\tconsole.log(`checkPermissions result: ${result}`)\r\n\t\t\tif (result && !isConnecting.current && currentStep === ProvisioningStep.SCANNING_BLES) {\r\n\t\t\t\tconsole.log('Start BleScan with prefix:', devicePrefix)\r\n\t\t\t\tsetBleDevices([])\r\n\t\t\t\tEspIdfRn.startBleScan(devicePrefix)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tasync function _handleAppStateChange(nextAppState: AppStateStatus) {\r\n\t\t\tconsole.log(`AppSateChanged: ${nextAppState}`)\r\n\t\t\tif (nextAppState === 'active') {\r\n\t\t\t\tinitPermissionCheckAndBleScan()\r\n\t\t\t}\r\n\t\t}\r\n\t\tAppState.addEventListener('change', _handleAppStateChange)\r\n\r\n\t\teventEmitter.addListener('permission', (event) => {\r\n\t\t\tconsole.log('Event permission', event)\r\n\t\t\tif (event.status) {\r\n\t\t\t\tif (currentStep === ProvisioningStep.SCANNING_BLES && !isConnecting.current) {\r\n\t\t\t\t\tinitPermissionCheckAndBleScan()\r\n\t\t\t\t} else if (currentStep === ProvisioningStep.SCANNING_WIFIS) {\r\n\t\t\t\t\tEspIdfRn.startWifiScan()\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tsetStatus(\r\n\t\t\t\t\tevent.type === 1\r\n\t\t\t\t\t\t? msg.current.enableBluetooth\r\n\t\t\t\t\t\t: msg.current.enableLocation\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\t// Init\r\n\t\tif (currentStep === ProvisioningStep.SCANNING_BLES) {\r\n\t\t\tinitPermissionCheckAndBleScan()\r\n\t\t}\r\n\r\n\t\treturn function () {\r\n\t\t\tconsole.log('Removed AppSateChanged listener')\r\n\t\t\teventEmitter.removeAllListeners('permission')\r\n\t\t\tAppState.removeEventListener('change', _handleAppStateChange)\r\n\t\t}\r\n\t}, [currentStep, devicePrefix])\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('Added listeners')\r\n\t\teventEmitter.addListener('scanBle', (event) => {\r\n\t\t\tconsole.log('Event scanBle', event)\r\n\t\t\tif (event instanceof Array) {\r\n\t\t\t\tsetBleDevices(event)\r\n\t\t\t} else if ((event as BleDevice).deviceName) {\r\n\t\t\t\tsetBleDevices((prev) =>\r\n\t\t\t\t\tprev.some((it) => it.serviceUuid === (event as BleDevice).serviceUuid)\r\n\t\t\t\t\t\t? prev\r\n\t\t\t\t\t\t: prev.concat(event as BleDevice)\r\n\t\t\t\t)\r\n\t\t\t} else if ((event as BleScanEvent).status === 0) {\r\n\t\t\t\tsetLoading(false)\r\n\t\t\t\tsetStatus(msg.current.scanBleFailed)\r\n\t\t\t} else {\r\n\t\t\t\tsetLoading(false)\r\n\t\t\t\tif (!isConnecting.current) setStatus('')\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\teventEmitter.addListener('connection', (event) => {\r\n\t\t\tisConnecting.current = false\r\n\t\t\tconsole.log('Event connection', event)\r\n\t\t\tswitch (event.status) {\r\n\t\t\t\tcase 1: //connected\r\n\t\t\t\t\tconsole.log('Will wait for certificate')\r\n\t\t\t\t\tsetCurrentStep(ProvisioningStep.WAITING_CERTIFICATE)\r\n\t\t\t\t\tsetStatus(msg.current.waitingCertificate)\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 2: //failed\r\n\t\t\t\t\tsetStatus(msg.current.connectFailed)\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 3: //disconnected\r\n\t\t\t\t\tsetStatus(msg.current.disconnected)\r\n\t\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\teventEmitter.addListener('certificate', (event) => {\r\n\t\t\tisConnecting.current = false\r\n\t\t\tconsole.log('Event certificate', event)\r\n\t\t\tconsole.log('Event certificate message: ', event.message ?? '')\r\n\t\t\tswitch (event.status) {\r\n\t\t\t\tcase 1: //success\r\n\t\t\t\t\tconsole.log('Event certificate success!')\r\n\t\t\t\t\tEspIdfRn.startWifiScan()\r\n\t\t\t\t\tsetCurrentStep(ProvisioningStep.SCANNING_WIFIS)\r\n\t\t\t\t\tsetLoading(true)\r\n\t\t\t\t\tsetStatus(msg.current.scanWifi)\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 0: //failed\r\n\t\t\t\t\tconsole.log('Event certificate failed!')\r\n\t\t\t\t\tsetCurrentStep(ProvisioningStep.STARTED)\r\n\t\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\teventEmitter.addListener('provisioning', (event) => {\r\n\t\t\tconsole.log('Event provisioning', event)\r\n\t\t\tswitch (event.status) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tsetProvSent(doneStep(event.message!, true))\r\n\t\t\t\t\tsetProvFinal(doneStep(msg.current.initSessionError, true))\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tsetProvSent((prev) => ({ ...prev, done: true }))\r\n\t\t\t\t\tsetProvApplied((prev) => ({ ...prev, progress: true }))\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tsetProvApplied((prev) => ({ ...prev, done: true }))\r\n\t\t\t\t\tsetProvFinal(doneStep(msg.current.completed))\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tsetProvApplied(doneStep(event.message!, false))\r\n\t\t\t\t\tsetProvFinal(doneStep(msg.current.applyError, true))\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn function () {\r\n\t\t\tconsole.log('Removed listeners')\r\n\t\t\teventEmitter.removeAllListeners('scanBle')\r\n\t\t\teventEmitter.removeAllListeners('connection')\r\n\t\t\teventEmitter.removeAllListeners('provisioning')\r\n\t\t}\r\n\t}, [devicePrefix])\r\n\r\n\treturn {\r\n\t\tbleDevices,\r\n\t\twifiAPs,\r\n\t\tloading,\r\n\t\tstatus,\r\n\t\tcurrentStep,\r\n\t\tcurrentWifi,\r\n\t\tcurrentDevice,\r\n\t\tresults: [provSent, provApplied, provFinal],\r\n\t\tsetCurrentStep,\r\n\t\tconnectDevice,\r\n\t\tconfigWifi,\r\n\t\tdoProvisioning,\r\n\t\tsendCertificate,\r\n\t}\r\n}\r\n\r\nfunction doProvisioning(_wifi: WifiAP | WifiAPWithPwd) {\r\n\treturn EspIdfRn.doProvisioning(\r\n\t\t_wifi.ssid,\r\n\t\t'password' in _wifi ? _wifi.password : ''\r\n\t)\r\n}\r\n\r\nexport function sendCertificate(info: CertificateInfo) {\r\n\tconst newInfo: CertificateInfo = {\r\n\t\tthingName: info.thingName,\r\n\t\tendpointUrl: info.endpointUrl,\r\n\t\tdeviceCert: info.deviceCert.replace(/\\n/g,''),\r\n\t\tdeviceKey: info.deviceKey.replace(/\\n/g,'')\r\n\t}\r\n\tconsole.log(\"Certificate to send: \", newInfo)\r\n\treturn EspIdfRn.sendCertificate(\r\n\t\tnewInfo.thingName,\r\n\t\tnewInfo.endpointUrl,\r\n\t\tnewInfo.deviceCert,\r\n\t\tnewInfo.deviceKey\r\n\t)\r\n}\r\n\r\nexport type ProvisioningStepStatus = {\r\n\tdone: boolean\r\n\tprogress: boolean\r\n\tfailed: boolean\r\n\tmessage: string\r\n}\r\n\r\nfunction initStep(message: string, progress = false): ProvisioningStepStatus {\r\n\treturn {\r\n\t\tdone: false,\r\n\t\tprogress,\r\n\t\tfailed: false,\r\n\t\tmessage,\r\n\t}\r\n}\r\n\r\nfunction doneStep(message: string, failed = false): ProvisioningStepStatus {\r\n\treturn {\r\n\t\tprogress: false,\r\n\t\tdone: true,\r\n\t\tfailed,\r\n\t\tmessage,\r\n\t}\r\n}\r\n"]}