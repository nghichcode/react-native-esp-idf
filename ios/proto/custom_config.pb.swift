// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: custom_config.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum CustomConfigStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case configSuccess // = 0
  case configFail // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .configSuccess
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .configSuccess
    case 1: self = .configFail
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .configSuccess: return 0
    case .configFail: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension CustomConfigStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CustomConfigStatus] = [
    .configSuccess,
    .configFail,
  ]
}

#endif  // swift(>=4.2)

struct CloudID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var thingName: String = String()

  var endpointURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CertChunk {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chunk: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct KeyChunk {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chunk: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CustomConfigRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cloudOneof: CustomConfigRequest.OneOf_CloudOneof? = nil

  var cloudID: CloudID {
    get {
      if case .cloudID(let v)? = cloudOneof {return v}
      return CloudID()
    }
    set {cloudOneof = .cloudID(newValue)}
  }

  var certChunk: CertChunk {
    get {
      if case .certChunk(let v)? = cloudOneof {return v}
      return CertChunk()
    }
    set {cloudOneof = .certChunk(newValue)}
  }

  var keyChunk: KeyChunk {
    get {
      if case .keyChunk(let v)? = cloudOneof {return v}
      return KeyChunk()
    }
    set {cloudOneof = .keyChunk(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_CloudOneof: Equatable {
    case cloudID(CloudID)
    case certChunk(CertChunk)
    case keyChunk(KeyChunk)

  #if !swift(>=4.1)
    static func ==(lhs: CustomConfigRequest.OneOf_CloudOneof, rhs: CustomConfigRequest.OneOf_CloudOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.cloudID, .cloudID): return {
        guard case .cloudID(let l) = lhs, case .cloudID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.certChunk, .certChunk): return {
        guard case .certChunk(let l) = lhs, case .certChunk(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.keyChunk, .keyChunk): return {
        guard case .keyChunk(let l) = lhs, case .keyChunk(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct CustomConfigResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: CustomConfigStatus = .configSuccess

  var thingNameLength: Int32 = 0

  var endpointURLLength: Int32 = 0

  var certLength: Int32 = 0

  var keyLength: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CustomConfigStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ConfigSuccess"),
    1: .same(proto: "ConfigFail"),
  ]
}

extension CloudID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CloudID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "thing_name"),
    2: .standard(proto: "endpoint_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.thingName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.endpointURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.thingName.isEmpty {
      try visitor.visitSingularStringField(value: self.thingName, fieldNumber: 1)
    }
    if !self.endpointURL.isEmpty {
      try visitor.visitSingularStringField(value: self.endpointURL, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CloudID, rhs: CloudID) -> Bool {
    if lhs.thingName != rhs.thingName {return false}
    if lhs.endpointURL != rhs.endpointURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CertChunk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CertChunk"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chunk"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chunk) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chunk.isEmpty {
      try visitor.visitSingularStringField(value: self.chunk, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CertChunk, rhs: CertChunk) -> Bool {
    if lhs.chunk != rhs.chunk {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KeyChunk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "KeyChunk"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chunk"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chunk) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chunk.isEmpty {
      try visitor.visitSingularStringField(value: self.chunk, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KeyChunk, rhs: KeyChunk) -> Bool {
    if lhs.chunk != rhs.chunk {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CustomConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CustomConfigRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cloud_id"),
    2: .standard(proto: "cert_chunk"),
    3: .standard(proto: "key_chunk"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: CloudID?
        var hadOneofValue = false
        if let current = self.cloudOneof {
          hadOneofValue = true
          if case .cloudID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.cloudOneof = .cloudID(v)
        }
      }()
      case 2: try {
        var v: CertChunk?
        var hadOneofValue = false
        if let current = self.cloudOneof {
          hadOneofValue = true
          if case .certChunk(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.cloudOneof = .certChunk(v)
        }
      }()
      case 3: try {
        var v: KeyChunk?
        var hadOneofValue = false
        if let current = self.cloudOneof {
          hadOneofValue = true
          if case .keyChunk(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.cloudOneof = .keyChunk(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.cloudOneof {
    case .cloudID?: try {
      guard case .cloudID(let v)? = self.cloudOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .certChunk?: try {
      guard case .certChunk(let v)? = self.cloudOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .keyChunk?: try {
      guard case .keyChunk(let v)? = self.cloudOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CustomConfigRequest, rhs: CustomConfigRequest) -> Bool {
    if lhs.cloudOneof != rhs.cloudOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CustomConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CustomConfigResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "thing_name_length"),
    3: .standard(proto: "endpoint_url_length"),
    4: .standard(proto: "cert_length"),
    5: .standard(proto: "key_length"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.thingNameLength) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.endpointURLLength) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.certLength) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.keyLength) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .configSuccess {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if self.thingNameLength != 0 {
      try visitor.visitSingularInt32Field(value: self.thingNameLength, fieldNumber: 2)
    }
    if self.endpointURLLength != 0 {
      try visitor.visitSingularInt32Field(value: self.endpointURLLength, fieldNumber: 3)
    }
    if self.certLength != 0 {
      try visitor.visitSingularInt32Field(value: self.certLength, fieldNumber: 4)
    }
    if self.keyLength != 0 {
      try visitor.visitSingularInt32Field(value: self.keyLength, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CustomConfigResponse, rhs: CustomConfigResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.thingNameLength != rhs.thingNameLength {return false}
    if lhs.endpointURLLength != rhs.endpointURLLength {return false}
    if lhs.certLength != rhs.certLength {return false}
    if lhs.keyLength != rhs.keyLength {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
